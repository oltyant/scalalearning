import sbt._
import Keys._

object Kittens extends Build {
  lazy val checkUname = taskKey[String]("Check the uname of the system")
  lazy val dependentJarDirectory = settingKey[File]("location of the unpacked dependent jars")
  lazy val unpackJars = taskKey[Seq[_]]("unpack all the dependent Jar files into a dependentJarDirectory")
  lazy val createDependentJarLibrary = taskKey[String]("Check and create the dependent jar library")
  lazy val createUberJar = taskKey[File]("create jar which we will run")
  val excludes = List("meta-inf", "license", "play.plugins", "reference.conf")

  override lazy val settings = super.settings ++ Seq(
    dependentJarDirectory := target.value / "dependent-jars"
  )
  checkUname in ThisBuild := Process("uname -a").lines.head
  createDependentJarLibrary := {
    sbt.IO.createDirectory(dependentJarDirectory.value)
    dependentJarDirectory.value.getAbsolutePath
  }

  def unpackFilter(target: File) = new NameFilter {
    override def accept(name: String): Boolean = !excludes.exists(x => name.toLowerCase.startsWith(x)) && ! file(target.getAbsolutePath() + "/" + name).exists
  }

  def unpack(target: File, f: File) = {
    if (f.isDirectory) sbt.IO.copyDirectory(f, target)
    else sbt.IO.unzip(f, target, unpackFilter(target))
  }
  unpackJars := {createDependentJarLibrary.value; Build.data((dependencyClasspath in Runtime).value).map(f => unpack(dependentJarDirectory.value, f))}

  createUberJar := {
    def create(jarDir: File, buildJar: File) = {
      val files = (jarDir ** "*").get.filter(_ != jarDir)
      val filesWithPath = files.map(x => (x, x.relativeTo(jarDir).get.getPath))
      sbt.IO.zip(filesWithPath, buildJar)
    }
    create (dependentJarDirectory.value, target.value / "build.jar");
    target.value / "build.jar"
  }

  name := "preowned-kittens"

  version := "1.0"

  def PreownedKittenProject(name: String): Project = {
    Project(name, file(name))
      .settings( Defaults.itSettings : _*)
      .settings(
        version      := "1.0",
        organization := "com.preownedkittens",
        libraryDependencies ++= Seq(
          "com.typesafe.scala-logging" %% "scala-logging-slf4j" % "2.1.2",
          "ch.qos.logback" % "logback-classic" % "1.0.7",
          "junit" % "junit" % "4.11" % "test",
          "org.scalacheck" %% "scalacheck" % "1.12.2",
          "org.specs2" %% "specs2" % "1.14" % "test",
          "org.pegdown" % "pegdown" % "1.0.2" % "test",
          "org.scalatest" %% "scalatest" % "2.0" % "test,it",
          "org.seleniumhq.selenium" % "selenium-java" % "2.31.0" % "it",
          "com.novocode" % "junit-interface" % "0.11" % "test"
        )
      )
      .configs(IntegrationTest)
  }

  lazy val common = (
    PreownedKittenProject("common")
      .settings()
    )

  lazy val analytics = (
    PreownedKittenProject("analytics")
      .dependsOn(common)
      .settings()
    )

  lazy val website = (
    PreownedKittenProject("website")
      .dependsOn(common)
      .settings()
    )

  includeFilter in (Compile, unmanagedSources) := "*.scala"
  excludeFilter in (Compile, unmanagedSources) := NothingFilter
  mappings in packageBin in Compile += (baseDirectory.value / "LICENSE") -> "PREOWNED-KITTEN-LICENSE"
}
